// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelCapstone.BackEnd.Domain.Data;

#nullable disable

namespace TravelCapstone.BackEnd.Domain.Migrations
{
    [DbContext(typeof(TravelCapstoneDbContext))]
    [Migration("20240417120331_addStartLocationFieldRequestForm")]
    partial class addStartLocationFieldRequestForm
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6a32e12a-60b5-4d93-8306-82231e1232d7",
                            ConcurrencyStamp = "6a32e12a-60b5-4d93-8306-82231e1232d7",
                            Name = "ADMIN",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "85b6791c-49d8-4a61-ad0b-8274ec27e764",
                            ConcurrencyStamp = "85b6791c-49d8-4a61-ad0b-8274ec27e764",
                            Name = "STAFF",
                            NormalizedName = "staff"
                        },
                        new
                        {
                            Id = "814f9270-78f5-4503-b7d3-0c567e5812ba",
                            ConcurrencyStamp = "814f9270-78f5-4503-b7d3-0c567e5812ba",
                            Name = "TOUR GUIDE",
                            NormalizedName = "tour guide"
                        },
                        new
                        {
                            Id = "02962efa-1273-46c0-b103-7167b1742ef3",
                            ConcurrencyStamp = "02962efa-1273-46c0-b103-7167b1742ef3",
                            Name = "CUSTOMER",
                            NormalizedName = "customer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerifyCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.AttendanceDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttendanceRouteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AttendanceTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("TourTravellerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceRouteId");

                    b.HasIndex("AttendanceTypeId");

                    b.HasIndex("TourTravellerId");

                    b.ToTable("AttendanceDetails");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.AttendanceRoute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AttendanceRouteTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceRouteTypeId");

                    b.HasIndex("RouteId");

                    b.ToTable("AttendanceRoutes");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Commune", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Communes");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Configuration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActiveValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContractStatus")
                        .HasColumnType("int");

                    b.Property<string>("ContractUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfContract")
                        .HasColumnType("datetime2");

                    b.Property<double>("Deposit")
                        .HasColumnType("float");

                    b.Property<int>("NumOfAdult")
                        .HasColumnType("int");

                    b.Property<int>("NumOfChild")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<Guid?>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreateBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TourId");

                    b.HasIndex("UpdateBy");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdult")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerfiedPhoneNumber")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerifiedEmail")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Money")
                        .HasColumnType("float");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerficationCodeEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerficationCodePhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.DayPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("DayPlans");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Destination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommunceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommunceId");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.District", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DayOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.AttendanceRouteType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AttendanceRouteTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "IN"
                        },
                        new
                        {
                            Id = 1,
                            Name = "OUT"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.AttendanceType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AttendanceTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "NOTYET"
                        },
                        new
                        {
                            Id = 1,
                            Name = "ATTENDEDED"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ABSENT"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.ContractStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContractStatuses");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.JoinTourStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JoinTourStatuses");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "NEW"
                        },
                        new
                        {
                            Id = 1,
                            Name = "APPROVED"
                        },
                        new
                        {
                            Id = 2,
                            Name = "REJECTED"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.MainVehicleTour", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MainVehicleTours");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.MaterialType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MaterialTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "PASSPORT"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.OptionClass", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OptionClasses");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "ECONOMY"
                        },
                        new
                        {
                            Id = 1,
                            Name = "MIDDLE"
                        },
                        new
                        {
                            Id = 2,
                            Name = "PREMIUM"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.OptionQuotationStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OptionQuotationStatuses");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "NEW"
                        },
                        new
                        {
                            Id = 1,
                            Name = "ACTIVE"
                        },
                        new
                        {
                            Id = 2,
                            Name = "IN_ACTIVE"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "NEW"
                        },
                        new
                        {
                            Id = 1,
                            Name = "PAID"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.PortType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PortTypes");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.PrivateTourStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PrivateTourStatuses");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "NEW"
                        },
                        new
                        {
                            Id = 1,
                            Name = "WAITINGFORCUSTOMER"
                        },
                        new
                        {
                            Id = 2,
                            Name = "APPROVED"
                        },
                        new
                        {
                            Id = 3,
                            Name = "REJECTED"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.ServiceAvailability", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceAvailabilities");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "ADULT"
                        },
                        new
                        {
                            Id = 1,
                            Name = "CHILD"
                        },
                        new
                        {
                            Id = 2,
                            Name = "BOTH"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "HOTEL"
                        },
                        new
                        {
                            Id = 1,
                            Name = "RESTAURANTS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ENTERTAINMENT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "VEHICLE_SUPPLY"
                        },
                        new
                        {
                            Id = 4,
                            Name = "AIR_TICKET_SUPPLY"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.TourStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TourStatuses");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "NEW"
                        },
                        new
                        {
                            Id = 1,
                            Name = "PENDING"
                        },
                        new
                        {
                            Id = 2,
                            Name = "SUFFICIENT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "SCHEDULING_COMPLETED"
                        },
                        new
                        {
                            Id = 4,
                            Name = "STARTING"
                        },
                        new
                        {
                            Id = 5,
                            Name = "COMPLETED"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.TourType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TourTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "PUBLIC"
                        },
                        new
                        {
                            Id = 1,
                            Name = "CUSTOM"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ENTERPRISE"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.TransactionType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransactionTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "RECHARGE_FROM_VNPAY"
                        },
                        new
                        {
                            Id = 1,
                            Name = "RECHARGE_FROM_MOMO"
                        },
                        new
                        {
                            Id = 2,
                            Name = "PAYMENT_FOR_SERVICES"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.Unit", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "DAY"
                        },
                        new
                        {
                            Id = 1,
                            Name = "ROOM"
                        },
                        new
                        {
                            Id = 2,
                            Name = "PERSON"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "BUS"
                        },
                        new
                        {
                            Id = 1,
                            Name = "COACH"
                        },
                        new
                        {
                            Id = 2,
                            Name = "LIMOUSINE"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CAR"
                        },
                        new
                        {
                            Id = 4,
                            Name = "PLANE"
                        },
                        new
                        {
                            Id = 5,
                            Name = "BOAT"
                        },
                        new
                        {
                            Id = 6,
                            Name = "BICYCLE"
                        },
                        new
                        {
                            Id = 7,
                            Name = "HELICOPTER"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.FlightInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EndPoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuotationDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StartPoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuotationDetailId")
                        .IsUnique();

                    b.ToTable("FlightInformations");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DayPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaterialTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DayPlanId");

                    b.HasIndex("MaterialTypeId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.OptionQuotation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("MaxTotal")
                        .HasColumnType("float");

                    b.Property<double>("MinTotal")
                        .HasColumnType("float");

                    b.Property<int>("OptionClassId")
                        .HasColumnType("int");

                    b.Property<int>("OptionQuotationStatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("PrivateTourRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OptionClassId");

                    b.HasIndex("OptionQuotationStatusId");

                    b.HasIndex("PrivateTourRequestId");

                    b.ToTable("OptionQuotations");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumOfAdult")
                        .HasColumnType("int");

                    b.Property<int>("NumOfChildren")
                        .HasColumnType("int");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<Guid?>("PrivateTourRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<Guid?>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PrivateTourRequestId");

                    b.HasIndex("TourId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.PlanServiceCostDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SellPriceHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SellPriceHistoryId");

                    b.HasIndex("TourId");

                    b.ToTable("PlanServiceCostDetails");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Port", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CommuneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PortType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommuneId");

                    b.ToTable("Ports");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.PrivateJoinTourRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("JoinTourStatusId")
                        .HasColumnType("int");

                    b.Property<int>("NumOfAdult")
                        .HasColumnType("int");

                    b.Property<int>("NumOfChildren")
                        .HasColumnType("int");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TravelCompanionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreateBy");

                    b.HasIndex("JoinTourStatusId");

                    b.HasIndex("TourId");

                    b.HasIndex("TravelCompanionId");

                    b.HasIndex("UpdateBy");

                    b.ToTable("PrivateJoinTourRequests");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.PrivateTourRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnterprise")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainDestinationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumOfAdult")
                        .HasColumnType("int");

                    b.Property<int>("NumOfChildren")
                        .HasColumnType("int");

                    b.Property<int>("NumOfDay")
                        .HasColumnType("int");

                    b.Property<int>("NumOfNight")
                        .HasColumnType("int");

                    b.Property<int>("PrivateTourStatusId")
                        .HasColumnType("int");

                    b.Property<string>("RecommnendedTourUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StartLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreateBy");

                    b.HasIndex("MainDestinationId");

                    b.HasIndex("PrivateTourStatusId");

                    b.HasIndex("TourId");

                    b.HasIndex("UpdateBy");

                    b.ToTable("PrivateTourRequests");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Province", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.QuotationDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxPrice")
                        .HasColumnType("int");

                    b.Property<int>("MinPrice")
                        .HasColumnType("int");

                    b.Property<Guid>("OptionQuotationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantityOfAdult")
                        .HasColumnType("int");

                    b.Property<int>("QuantityOfChild")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceRatingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OptionQuotationId");

                    b.HasIndex("ServiceRatingId");

                    b.ToTable("QuotationDetails");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.ReferenceTransportPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AdultPrice")
                        .HasColumnType("float");

                    b.Property<Guid>("ArrivalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ChildPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceRatingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ArrivalId");

                    b.HasIndex("DepartureId");

                    b.HasIndex("ServiceRatingId");

                    b.ToTable("ReferenceTransportPrices");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.RequestedLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PrivateTourRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PrivateTourRequestId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("RequestedLocations");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DayPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EndPointId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentRouteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StartPointId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DayPlanId");

                    b.HasIndex("EndPointId");

                    b.HasIndex("ParentRouteId");

                    b.HasIndex("StartPointId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.SellPriceHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("MOQ")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("SellPriceHistorys");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CommunceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceAvailabilityId")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceRatingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ServingQuantity")
                        .HasColumnType("int");

                    b.Property<double>("SurchargePercent")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CommunceId");

                    b.HasIndex("ServiceAvailabilityId");

                    b.HasIndex("ServiceProviderId");

                    b.HasIndex("ServiceRatingId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.ServiceCostHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("MOQ")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UnitId");

                    b.ToTable("ServiceCostHistorys");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.ServiceProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceProviders");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.ServiceRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("ServiceRatings");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Tour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BasedOnTourId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PricePerAdult")
                        .HasColumnType("float");

                    b.Property<double>("PricePerChild")
                        .HasColumnType("float");

                    b.Property<string>("QRCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<string>("TourGuideId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TourStatusId")
                        .HasColumnType("int");

                    b.Property<int>("TourTypeId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BasedOnTourId");

                    b.HasIndex("TourGuideId");

                    b.HasIndex("TourStatusId");

                    b.HasIndex("TourTypeId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.TourRegistration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FollowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PresenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FollowerId");

                    b.HasIndex("PresenterId");

                    b.HasIndex("TourId");

                    b.ToTable("TourRegistrations");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.TourTraveller", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TourId");

                    b.ToTable("TourTravellers");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("TravelCompanionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TransactionTypeId");

                    b.HasIndex("TravelCompanionId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("ChassisNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.VehicleRoute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("RouteId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleRoutes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.AttendanceDetail", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.AttendanceRoute", "AttendanceRoute")
                        .WithMany()
                        .HasForeignKey("AttendanceRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.AttendanceType", "AttendanceType")
                        .WithMany()
                        .HasForeignKey("AttendanceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.TourTraveller", "TourTraveller")
                        .WithMany()
                        .HasForeignKey("TourTravellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendanceRoute");

                    b.Navigation("AttendanceType");

                    b.Navigation("TourTraveller");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.AttendanceRoute", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.AttendanceRouteType", "AttendanceRouteType")
                        .WithMany()
                        .HasForeignKey("AttendanceRouteTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendanceRouteType");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Commune", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Contract", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", "CreateByAccount")
                        .WithMany()
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Tour", "Project")
                        .WithMany()
                        .HasForeignKey("TourId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", "UpdateByAccount")
                        .WithMany()
                        .HasForeignKey("UpdateBy");

                    b.Navigation("CreateByAccount");

                    b.Navigation("Customer");

                    b.Navigation("Project");

                    b.Navigation("UpdateByAccount");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Customer", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.DayPlan", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Destination", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Commune", "Communce")
                        .WithMany()
                        .HasForeignKey("CommunceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Communce");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.District", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.FlightInformation", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.QuotationDetail", "QuotationDetail")
                        .WithOne("FlightInformation")
                        .HasForeignKey("TravelCapstone.BackEnd.Domain.Models.FlightInformation", "QuotationDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuotationDetail");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Material", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.DayPlan", "DayPlan")
                        .WithMany()
                        .HasForeignKey("DayPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.MaterialType", "MaterialType")
                        .WithMany()
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DayPlan");

                    b.Navigation("MaterialType");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.OptionQuotation", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.OptionClass", "OptionClass")
                        .WithMany()
                        .HasForeignKey("OptionClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.OptionQuotationStatus", "OptionQuotationStatus")
                        .WithMany()
                        .HasForeignKey("OptionQuotationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.PrivateTourRequest", "PrivateTourRequest")
                        .WithMany()
                        .HasForeignKey("PrivateTourRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OptionClass");

                    b.Navigation("OptionQuotationStatus");

                    b.Navigation("PrivateTourRequest");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Order", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.PrivateTourRequest", "PrivateTourRequest")
                        .WithMany()
                        .HasForeignKey("PrivateTourRequestId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId");

                    b.Navigation("Customer");

                    b.Navigation("OrderStatus");

                    b.Navigation("PrivateTourRequest");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.PlanServiceCostDetail", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.SellPriceHistory", "SellPriceHistory")
                        .WithMany()
                        .HasForeignKey("SellPriceHistoryId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SellPriceHistory");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Port", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Commune", "Commune")
                        .WithMany()
                        .HasForeignKey("CommuneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commune");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.PrivateJoinTourRequest", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", "CreateByAccount")
                        .WithMany()
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.JoinTourStatus", "JoinTourStatus")
                        .WithMany()
                        .HasForeignKey("JoinTourStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Customer", "TravelCompanion")
                        .WithMany()
                        .HasForeignKey("TravelCompanionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", "UpdateByAccount")
                        .WithMany()
                        .HasForeignKey("UpdateBy");

                    b.Navigation("CreateByAccount");

                    b.Navigation("JoinTourStatus");

                    b.Navigation("Tour");

                    b.Navigation("TravelCompanion");

                    b.Navigation("UpdateByAccount");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.PrivateTourRequest", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", "CreateByAccount")
                        .WithMany()
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("MainDestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.PrivateTourStatus", "PrivateTourStatus")
                        .WithMany()
                        .HasForeignKey("PrivateTourStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", "UpdateByAccount")
                        .WithMany()
                        .HasForeignKey("UpdateBy");

                    b.Navigation("Account");

                    b.Navigation("CreateByAccount");

                    b.Navigation("PrivateTourStatus");

                    b.Navigation("Province");

                    b.Navigation("Tour");

                    b.Navigation("UpdateByAccount");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.QuotationDetail", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.OptionQuotation", "OptionQuotation")
                        .WithMany()
                        .HasForeignKey("OptionQuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.ServiceRating", "ServiceRating")
                        .WithMany()
                        .HasForeignKey("ServiceRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OptionQuotation");

                    b.Navigation("ServiceRating");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.ReferenceTransportPrice", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Port", "Arrival")
                        .WithMany()
                        .HasForeignKey("ArrivalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Port", "Departure")
                        .WithMany()
                        .HasForeignKey("DepartureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.ServiceRating", "ServiceRating")
                        .WithMany()
                        .HasForeignKey("ServiceRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arrival");

                    b.Navigation("Departure");

                    b.Navigation("ServiceRating");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.RequestedLocation", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.PrivateTourRequest", "PrivateTourRequest")
                        .WithMany()
                        .HasForeignKey("PrivateTourRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrivateTourRequest");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Route", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.DayPlan", "DayPlan")
                        .WithMany()
                        .HasForeignKey("DayPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Destination", "EndPoint")
                        .WithMany()
                        .HasForeignKey("EndPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Route", "ParentRoute")
                        .WithMany()
                        .HasForeignKey("ParentRouteId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Destination", "StartPoint")
                        .WithMany()
                        .HasForeignKey("StartPointId");

                    b.Navigation("DayPlan");

                    b.Navigation("EndPoint");

                    b.Navigation("ParentRoute");

                    b.Navigation("StartPoint");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.SellPriceHistory", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Service", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Commune", "Communce")
                        .WithMany()
                        .HasForeignKey("CommunceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.ServiceAvailability", "ServiceAvailability")
                        .WithMany()
                        .HasForeignKey("ServiceAvailabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.ServiceProvider", "ServiceProvider")
                        .WithMany()
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.ServiceRating", "ServiceRating")
                        .WithMany()
                        .HasForeignKey("ServiceRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Communce");

                    b.Navigation("ServiceAvailability");

                    b.Navigation("ServiceProvider");

                    b.Navigation("ServiceRating");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.ServiceCostHistory", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.ServiceRating", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.ServiceType", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Tour", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Tour", "BasedTour")
                        .WithMany()
                        .HasForeignKey("BasedOnTourId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", "TourGuide")
                        .WithMany()
                        .HasForeignKey("TourGuideId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.TourStatus", "TourStatus")
                        .WithMany()
                        .HasForeignKey("TourStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.TourType", "TourType")
                        .WithMany()
                        .HasForeignKey("TourTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BasedTour");

                    b.Navigation("TourGuide");

                    b.Navigation("TourStatus");

                    b.Navigation("TourType");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.TourRegistration", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Customer", "Follower")
                        .WithMany()
                        .HasForeignKey("FollowerId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Customer", "Presenter")
                        .WithMany()
                        .HasForeignKey("PresenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Follower");

                    b.Navigation("Presenter");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.TourTraveller", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Transaction", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Customer", "TravelCompanion")
                        .WithMany()
                        .HasForeignKey("TravelCompanionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransactionType");

                    b.Navigation("TravelCompanion");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Vehicle", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.VehicleRoute", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Route");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.QuotationDetail", b =>
                {
                    b.Navigation("FlightInformation");
                });
#pragma warning restore 612, 618
        }
    }
}
