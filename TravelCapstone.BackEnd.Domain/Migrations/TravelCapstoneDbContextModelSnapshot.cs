// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelCapstone.BackEnd.Domain.Data;

#nullable disable

namespace TravelCapstone.BackEnd.Domain.Migrations
{
    [DbContext(typeof(TravelCapstoneDbContext))]
    partial class TravelCapstoneDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6a32e12a-60b5-4d93-8306-82231e1232d7",
                            ConcurrencyStamp = "6a32e12a-60b5-4d93-8306-82231e1232d7",
                            Name = "ADMIN",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "85b6791c-49d8-4a61-ad0b-8274ec27e764",
                            ConcurrencyStamp = "85b6791c-49d8-4a61-ad0b-8274ec27e764",
                            Name = "STAFF",
                            NormalizedName = "staff"
                        },
                        new
                        {
                            Id = "814f9270-78f5-4503-b7d3-0c567e5812ba",
                            ConcurrencyStamp = "814f9270-78f5-4503-b7d3-0c567e5812ba",
                            Name = "TOUR GUIDE",
                            NormalizedName = "tour guide"
                        },
                        new
                        {
                            Id = "02962efa-1273-46c0-b103-7167b1742ef3",
                            ConcurrencyStamp = "02962efa-1273-46c0-b103-7167b1742ef3",
                            Name = "CUSTOMER",
                            NormalizedName = "customer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerifyCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Assurance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayMOQ")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Assurances");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.AssurancePriceHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssuranceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AssuranceId");

                    b.ToTable("AssurancePriceHistories");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.AttendanceDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttendanceRouteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AttendanceTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("TourTravellerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceRouteId");

                    b.HasIndex("AttendanceTypeId");

                    b.HasIndex("TourTravellerId");

                    b.ToTable("AttendanceDetails");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.AttendanceRoute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AttendanceRouteTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceRouteTypeId");

                    b.HasIndex("RouteId");

                    b.ToTable("AttendanceRoutes");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Commune", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Communes");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Configuration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActiveValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContractStatus")
                        .HasColumnType("int");

                    b.Property<string>("ContractUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfContract")
                        .HasColumnType("datetime2");

                    b.Property<double>("Deposit")
                        .HasColumnType("float");

                    b.Property<int>("NumOfAdult")
                        .HasColumnType("int");

                    b.Property<int>("NumOfChild")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<Guid?>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreateBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TourId");

                    b.HasIndex("UpdateBy");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdult")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerfiedPhoneNumber")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerifiedEmail")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Money")
                        .HasColumnType("float");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerficationCodeEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerficationCodePhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.DayPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("DayPlans");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Dish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DishTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DishTypeId");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.District", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DayOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<double>("FixDriverSalary")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.DriverSalaryHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("DriverSalaryHistories");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.AttendanceRouteType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AttendanceRouteTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "IN"
                        },
                        new
                        {
                            Id = 1,
                            Name = "OUT"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.AttendanceType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AttendanceTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "NOTYET"
                        },
                        new
                        {
                            Id = 1,
                            Name = "ATTENDEDED"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ABSENT"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.ContractStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContractStatuses");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.DietaryPreference", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DietaryPreferences");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "OMNIVORES"
                        },
                        new
                        {
                            Id = 1,
                            Name = "VEGAN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "VEGETARIAN"
                        },
                        new
                        {
                            Id = 3,
                            Name = "GLUTEN_FREE"
                        },
                        new
                        {
                            Id = 4,
                            Name = "HALAL"
                        },
                        new
                        {
                            Id = 5,
                            Name = "KOSHER"
                        },
                        new
                        {
                            Id = 6,
                            Name = "PESCATARIAN"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.DishType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DishTypes");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.FacilityType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FacilityTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "HOTEL"
                        },
                        new
                        {
                            Id = 1,
                            Name = "RESTAURANTS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ENTERTAINMENT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "VEHICLE_SUPPLY"
                        },
                        new
                        {
                            Id = 4,
                            Name = "AIR_TICKET_SUPPLY"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.JoinTourStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JoinTourStatuses");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "NEW"
                        },
                        new
                        {
                            Id = 1,
                            Name = "APPROVED"
                        },
                        new
                        {
                            Id = 2,
                            Name = "REJECTED"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.ManagementFeeType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ManagementFeeTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "ORGANIZATION_COST"
                        },
                        new
                        {
                            Id = 1,
                            Name = "CONTINGENCY_FEE"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ESCORT_FEE"
                        },
                        new
                        {
                            Id = 3,
                            Name = "OPERATING_FEE"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.MaterialType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MaterialTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "PASSPORT"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.MealType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MealTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Breakfast"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Lunch"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dinner"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.OptionClass", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OptionClasses");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "ECONOMY"
                        },
                        new
                        {
                            Id = 1,
                            Name = "MIDDLE"
                        },
                        new
                        {
                            Id = 2,
                            Name = "PREMIUM"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.OptionQuotationStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OptionQuotationStatuses");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "NEW"
                        },
                        new
                        {
                            Id = 1,
                            Name = "ACTIVE"
                        },
                        new
                        {
                            Id = 2,
                            Name = "IN_ACTIVE"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "NEW"
                        },
                        new
                        {
                            Id = 1,
                            Name = "PAID"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.PortType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PortTypes");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.PrivateTourStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PrivateTourStatuses");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "NEW"
                        },
                        new
                        {
                            Id = 1,
                            Name = "WAITINGFORCUSTOMER"
                        },
                        new
                        {
                            Id = 2,
                            Name = "APPROVED"
                        },
                        new
                        {
                            Id = 3,
                            Name = "REJECTED"
                        },
                        new
                        {
                            Id = 4,
                            Name = "PLANCREATED"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.Rating", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "LODGING"
                        },
                        new
                        {
                            Id = 1,
                            Name = "HOTEL_TWOSTAR"
                        },
                        new
                        {
                            Id = 2,
                            Name = "HOTEL_THREESTAR"
                        },
                        new
                        {
                            Id = 3,
                            Name = "HOTEL_FOURSTAR"
                        },
                        new
                        {
                            Id = 4,
                            Name = "HOTEL_FIVESTAR"
                        },
                        new
                        {
                            Id = 5,
                            Name = "RESTAURENT_CASUAL"
                        },
                        new
                        {
                            Id = 6,
                            Name = "RESTAURENT_TWOSTAR"
                        },
                        new
                        {
                            Id = 7,
                            Name = "RESTAURENT_THREESTAR"
                        },
                        new
                        {
                            Id = 8,
                            Name = "RESTAURENT_FOURSTAR"
                        },
                        new
                        {
                            Id = 9,
                            Name = "RESTAURENT_FIVESTAR"
                        },
                        new
                        {
                            Id = 10,
                            Name = "RESORT"
                        },
                        new
                        {
                            Id = 11,
                            Name = "TOURIST_AREA"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.ReferencePriceRating", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReferencePriceRating");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "ECONOMY_AIR_BRAND"
                        },
                        new
                        {
                            Id = 1,
                            Name = "STANDARD_AIR_BRAND"
                        },
                        new
                        {
                            Id = 2,
                            Name = "MIDDLE_AIR_BRAND"
                        },
                        new
                        {
                            Id = 3,
                            Name = "STANDARD_FERRY_TERMINAL"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.ServiceAvailability", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceAvailabilities");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "ADULT"
                        },
                        new
                        {
                            Id = 1,
                            Name = "CHILD"
                        },
                        new
                        {
                            Id = 2,
                            Name = "BOTH"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "RESTING"
                        },
                        new
                        {
                            Id = 1,
                            Name = "FOODANDBEVARAGE"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ENTERTAIMENT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "VEHICLE"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ATTRACTION"
                        },
                        new
                        {
                            Id = 5,
                            Name = "GUIDING"
                        },
                        new
                        {
                            Id = 6,
                            Name = "DRIVING"
                        },
                        new
                        {
                            Id = 7,
                            Name = "HOLD"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.TourStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TourStatuses");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "NEW"
                        },
                        new
                        {
                            Id = 1,
                            Name = "PENDING"
                        },
                        new
                        {
                            Id = 2,
                            Name = "SUFFICIENT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "SCHEDULING_COMPLETED"
                        },
                        new
                        {
                            Id = 4,
                            Name = "STARTING"
                        },
                        new
                        {
                            Id = 5,
                            Name = "COMPLETED"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.TourType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TourTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "PUBLIC"
                        },
                        new
                        {
                            Id = 1,
                            Name = "CUSTOM"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ENTERPRISE"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.TransactionType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransactionTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "RECHARGE_FROM_VNPAY"
                        },
                        new
                        {
                            Id = 1,
                            Name = "RECHARGE_FROM_MOMO"
                        },
                        new
                        {
                            Id = 2,
                            Name = "PAYMENT_FOR_SERVICES"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.Unit", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "DAY"
                        },
                        new
                        {
                            Id = 1,
                            Name = "ROOM"
                        },
                        new
                        {
                            Id = 2,
                            Name = "PERSON"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EnumModels.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "BUS"
                        },
                        new
                        {
                            Id = 1,
                            Name = "COACH"
                        },
                        new
                        {
                            Id = 2,
                            Name = "LIMOUSINE"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CAR"
                        },
                        new
                        {
                            Id = 4,
                            Name = "PLANE"
                        },
                        new
                        {
                            Id = 5,
                            Name = "BOAT"
                        },
                        new
                        {
                            Id = 6,
                            Name = "BICYCLE"
                        },
                        new
                        {
                            Id = 7,
                            Name = "HELICOPTER"
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MOQ")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EventDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PerPerson")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventDetails");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EventDetailPriceHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EventDetailId");

                    b.ToTable("EventDetailPriceHistories");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Facility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CommunceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FacilityRatingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CommunceId");

                    b.HasIndex("FacilityRatingId");

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.FacilityRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FacilityTypeId")
                        .HasColumnType("int");

                    b.Property<int>("RatingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilityTypeId");

                    b.HasIndex("RatingId");

                    b.ToTable("FacilityRatings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("34115f50-25d5-4750-8500-5cb917f27da5"),
                            FacilityTypeId = 0,
                            RatingId = 0
                        },
                        new
                        {
                            Id = new Guid("1e955290-e063-439f-8e17-d2edcb2ad69b"),
                            FacilityTypeId = 0,
                            RatingId = 1
                        },
                        new
                        {
                            Id = new Guid("1ba853db-84e4-4e9c-b750-dbe432d1a2b0"),
                            FacilityTypeId = 0,
                            RatingId = 2
                        },
                        new
                        {
                            Id = new Guid("ef3fc5d9-7c7a-44c3-8fc1-8da12ca7e93b"),
                            FacilityTypeId = 0,
                            RatingId = 3
                        },
                        new
                        {
                            Id = new Guid("f2603607-d947-4aca-888e-9fd3bc3c0339"),
                            FacilityTypeId = 0,
                            RatingId = 4
                        },
                        new
                        {
                            Id = new Guid("f48d19ee-36ae-49bd-88ed-a3d326b1b1d8"),
                            FacilityTypeId = 1,
                            RatingId = 5
                        },
                        new
                        {
                            Id = new Guid("23c8e757-ac2d-4232-a569-d5461deb9b05"),
                            FacilityTypeId = 1,
                            RatingId = 6
                        },
                        new
                        {
                            Id = new Guid("a59bbb50-4fcc-473f-bbf4-b311f06b2ed8"),
                            FacilityTypeId = 1,
                            RatingId = 7
                        },
                        new
                        {
                            Id = new Guid("fa63bf87-51a3-46b7-a6df-aa29fb9b9057"),
                            FacilityTypeId = 1,
                            RatingId = 8
                        },
                        new
                        {
                            Id = new Guid("4b3961ff-aa19-41fd-9a3e-1a6b37f99d09"),
                            FacilityTypeId = 1,
                            RatingId = 9
                        },
                        new
                        {
                            Id = new Guid("d39d6346-6831-4155-b27a-a2a779271ba2"),
                            FacilityTypeId = 0,
                            RatingId = 10
                        },
                        new
                        {
                            Id = new Guid("994cb1a9-6d4e-4d34-b904-91b229a12d5c"),
                            FacilityTypeId = 2,
                            RatingId = 11
                        });
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.FacilityService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceAvailabilityId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ServingQuantity")
                        .HasColumnType("int");

                    b.Property<double>("SurchargePercent")
                        .HasColumnType("float");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("ServiceAvailabilityId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("UnitId");

                    b.ToTable("FacilityServices");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.FamilyDetailRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumOfAdult")
                        .HasColumnType("int");

                    b.Property<int>("NumOfChildren")
                        .HasColumnType("int");

                    b.Property<Guid>("PrivateTourRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalFamily")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrivateTourRequestId");

                    b.ToTable("FamilyDetailRequests");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.ManagementFeeReference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ManagementFeeTypeId")
                        .HasColumnType("int");

                    b.Property<double>("MaxFee")
                        .HasColumnType("float");

                    b.Property<double>("MinFee")
                        .HasColumnType("float");

                    b.Property<int>("Moq")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManagementFeeTypeId");

                    b.ToTable("ManagementFeeReferences");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaterialTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTypeId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.MaterialAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MaterialPriceHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MaterialPriceHistoryId");

                    b.HasIndex("TourId");

                    b.ToTable("MaterialAssignments");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.MaterialPriceHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("MaterialPriceHistories");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DietaryPreferenceId")
                        .HasColumnType("int");

                    b.Property<Guid>("FacilityServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MealTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreateBy");

                    b.HasIndex("DietaryPreferenceId");

                    b.HasIndex("FacilityServiceId");

                    b.HasIndex("MealTypeId");

                    b.HasIndex("UpdateBy");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.MenuDish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuDishes");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.OptionEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomEvent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("OptionId");

                    b.ToTable("OptionEvents");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.OptionQuotation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssurancePriceHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ContingencyFee")
                        .HasColumnType("float");

                    b.Property<double>("DriverCost")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("EscortFee")
                        .HasColumnType("float");

                    b.Property<double>("MaxTotal")
                        .HasColumnType("float");

                    b.Property<double>("MinTotal")
                        .HasColumnType("float");

                    b.Property<double>("OperatingFee")
                        .HasColumnType("float");

                    b.Property<int>("OptionClassId")
                        .HasColumnType("int");

                    b.Property<int>("OptionQuotationStatusId")
                        .HasColumnType("int");

                    b.Property<double>("OrganizationCost")
                        .HasColumnType("float");

                    b.Property<Guid>("PrivateTourRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssurancePriceHistoryId");

                    b.HasIndex("OptionClassId");

                    b.HasIndex("OptionQuotationStatusId");

                    b.HasIndex("PrivateTourRequestId");

                    b.ToTable("OptionQuotations");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumOfAdult")
                        .HasColumnType("int");

                    b.Property<int>("NumOfChildren")
                        .HasColumnType("int");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<Guid?>("PrivateTourRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<Guid?>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PrivateTourRequestId");

                    b.HasIndex("TourId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.PlanServiceCostDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MaterialPriceHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReferenceTransportPriceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SellPriceHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MaterialPriceHistoryId");

                    b.HasIndex("ReferenceTransportPriceId");

                    b.HasIndex("SellPriceHistoryId");

                    b.HasIndex("TourId");

                    b.ToTable("PlanServiceCostDetails");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Port", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CommuneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PortType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommuneId");

                    b.ToTable("Ports");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.PrivateJoinTourRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("JoinTourStatusId")
                        .HasColumnType("int");

                    b.Property<int>("NumOfAdult")
                        .HasColumnType("int");

                    b.Property<int>("NumOfChildren")
                        .HasColumnType("int");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TravelCompanionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreateBy");

                    b.HasIndex("JoinTourStatusId");

                    b.HasIndex("TourId");

                    b.HasIndex("TravelCompanionId");

                    b.HasIndex("UpdateBy");

                    b.ToTable("PrivateJoinTourRequests");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.PrivateTourRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DietaryPreferenceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnterprise")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainDestinationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MinimumHotelRatingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MinimumRestaurantRatingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumOfAdult")
                        .HasColumnType("int");

                    b.Property<int>("NumOfChildren")
                        .HasColumnType("int");

                    b.Property<int>("NumOfDay")
                        .HasColumnType("int");

                    b.Property<int>("NumOfFamily")
                        .HasColumnType("int");

                    b.Property<int>("NumOfNight")
                        .HasColumnType("int");

                    b.Property<int>("NumOfSingleFemale")
                        .HasColumnType("int");

                    b.Property<int>("NumOfSingleMale")
                        .HasColumnType("int");

                    b.Property<int>("PrivateTourStatusId")
                        .HasColumnType("int");

                    b.Property<string>("RecommendedTourUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StartLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StartLocationCommuneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SuggestedTourguideName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("WishPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CreateBy");

                    b.HasIndex("DietaryPreferenceId");

                    b.HasIndex("MainDestinationId");

                    b.HasIndex("MinimumHotelRatingId");

                    b.HasIndex("MinimumRestaurantRatingId");

                    b.HasIndex("PrivateTourStatusId");

                    b.HasIndex("StartLocationCommuneId");

                    b.HasIndex("TourId");

                    b.HasIndex("UpdateBy");

                    b.ToTable("PrivateTourRequests");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Province", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("lat")
                        .HasColumnType("float");

                    b.Property<double?>("lng")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.QuotationDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FacilityRatingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MaterialPriceHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("MaxPrice")
                        .HasColumnType("float");

                    b.Property<double>("MaxRedundancyCost")
                        .HasColumnType("float");

                    b.Property<Guid?>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("MinPrice")
                        .HasColumnType("float");

                    b.Property<double>("MinRedundancyCost")
                        .HasColumnType("float");

                    b.Property<Guid>("OptionQuotationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuantityOfAdult")
                        .HasColumnType("int");

                    b.Property<int>("QuantityOfChild")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ServingQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("FacilityRatingId");

                    b.HasIndex("MaterialPriceHistoryId");

                    b.HasIndex("MenuId");

                    b.HasIndex("OptionQuotationId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("QuotationDetails");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.ReferenceTransportPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AdultPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ArrivalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ChildPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReferencePriceRatingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArrivalId");

                    b.HasIndex("DepartureId");

                    b.HasIndex("ReferencePriceRatingId");

                    b.ToTable("ReferenceTransportPrices");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.RequestedLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PrivateTourRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PrivateTourRequestId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("RequestedLocations");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DayPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EndPointId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentRouteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PortEndPointId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PortStartPointId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StartPointId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DayPlanId");

                    b.HasIndex("EndPointId");

                    b.HasIndex("ParentRouteId");

                    b.HasIndex("PortEndPointId");

                    b.HasIndex("PortStartPointId");

                    b.HasIndex("StartPointId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.SellPriceHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FacilityServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MOQ")
                        .HasColumnType("int");

                    b.Property<Guid?>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("RedundancyCost")
                        .HasColumnType("float");

                    b.Property<Guid?>("TransportServiceDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FacilityServiceId");

                    b.HasIndex("MenuId");

                    b.HasIndex("TransportServiceDetailId");

                    b.ToTable("SellPriceHistorys");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.ServiceCostHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FacilityServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MOQ")
                        .HasColumnType("int");

                    b.Property<Guid?>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("RedundancyCost")
                        .HasColumnType("float");

                    b.Property<Guid?>("TransportServiceDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FacilityServiceId");

                    b.HasIndex("MenuId");

                    b.HasIndex("TransportServiceDetailId");

                    b.ToTable("ServiceCostHistorys");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.ServiceProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceProviders");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Tour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BasedOnTourId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ContingencyFee")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("EscortFee")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OperatingFee")
                        .HasColumnType("float");

                    b.Property<double>("OrganizationCost")
                        .HasColumnType("float");

                    b.Property<double>("PricePerAdult")
                        .HasColumnType("float");

                    b.Property<double>("PricePerChild")
                        .HasColumnType("float");

                    b.Property<string>("QRCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("TourStatusId")
                        .HasColumnType("int");

                    b.Property<int>("TourTypeId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BasedOnTourId");

                    b.HasIndex("TourStatusId");

                    b.HasIndex("TourTypeId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.TourguideAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("TourGuideSalary")
                        .HasColumnType("float");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("TourId");

                    b.ToTable("TourguideAssignments");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.TourguideQuotationDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMainTourGuide")
                        .HasColumnType("bit");

                    b.Property<int>("NumOfDay")
                        .HasColumnType("int");

                    b.Property<Guid?>("OptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("TourguideQuotationDetails");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.TourGuideSalaryHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("TourGuideSalaryHistories");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.TourguideScope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("DistrictId");

                    b.ToTable("TourguideScopes");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.TourRegistration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FollowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PresenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FollowerId");

                    b.HasIndex("PresenterId");

                    b.HasIndex("TourId");

                    b.ToTable("TourRegistrations");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.TourTraveller", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TourId");

                    b.ToTable("TourTravellers");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("TravelCompanionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TransactionTypeId");

                    b.HasIndex("TravelCompanionId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.TransportServiceDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FacilityServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ServingQuantity")
                        .HasColumnType("int");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilityServiceId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("TransportServiceDetails");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("ChassisNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeatCapacity")
                        .HasColumnType("int");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.VehicleQuotationDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EndPointDistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EndPointId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EndPortId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("MaxPrice")
                        .HasColumnType("float");

                    b.Property<double>("MinPrice")
                        .HasColumnType("float");

                    b.Property<int>("NumOfRentingDay")
                        .HasColumnType("int");

                    b.Property<int>("NumOfVehicle")
                        .HasColumnType("int");

                    b.Property<Guid>("OptionQuotationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("StartPointDistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StartPointId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StartPortId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VehicleType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EndPointDistrictId");

                    b.HasIndex("EndPointId");

                    b.HasIndex("EndPortId");

                    b.HasIndex("OptionQuotationId");

                    b.HasIndex("StartPointDistrictId");

                    b.HasIndex("StartPointId");

                    b.HasIndex("StartPortId");

                    b.ToTable("VehicleQuotationDetails");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.VehicleRoute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferenceBrandName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VehicleType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("RouteId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleRoutes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.AssurancePriceHistory", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Assurance", "Assurance")
                        .WithMany()
                        .HasForeignKey("AssuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assurance");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.AttendanceDetail", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.AttendanceRoute", "AttendanceRoute")
                        .WithMany()
                        .HasForeignKey("AttendanceRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.AttendanceType", "AttendanceType")
                        .WithMany()
                        .HasForeignKey("AttendanceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.TourTraveller", "TourTraveller")
                        .WithMany()
                        .HasForeignKey("TourTravellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendanceRoute");

                    b.Navigation("AttendanceType");

                    b.Navigation("TourTraveller");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.AttendanceRoute", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.AttendanceRouteType", "AttendanceRouteType")
                        .WithMany()
                        .HasForeignKey("AttendanceRouteTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendanceRouteType");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Commune", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Contract", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", "CreateByAccount")
                        .WithMany()
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Tour", "Project")
                        .WithMany()
                        .HasForeignKey("TourId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", "UpdateByAccount")
                        .WithMany()
                        .HasForeignKey("UpdateBy");

                    b.Navigation("CreateByAccount");

                    b.Navigation("Customer");

                    b.Navigation("Project");

                    b.Navigation("UpdateByAccount");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Customer", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.DayPlan", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Dish", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.DishType", "DishType")
                        .WithMany()
                        .HasForeignKey("DishTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DishType");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.District", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.DriverSalaryHistory", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EventDetail", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.EventDetailPriceHistory", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EventDetail", "EventDetail")
                        .WithMany()
                        .HasForeignKey("EventDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventDetail");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Facility", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Commune", "Communce")
                        .WithMany()
                        .HasForeignKey("CommunceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.FacilityRating", "FacilityRating")
                        .WithMany()
                        .HasForeignKey("FacilityRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.ServiceProvider", "ServiceProvider")
                        .WithMany()
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Communce");

                    b.Navigation("FacilityRating");

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.FacilityRating", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.FacilityType", "FacilityType")
                        .WithMany()
                        .HasForeignKey("FacilityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacilityType");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.FacilityService", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.ServiceAvailability", "ServiceAvailability")
                        .WithMany()
                        .HasForeignKey("ServiceAvailabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.ServiceType", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("ServiceAvailability");

                    b.Navigation("ServiceType");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.FamilyDetailRequest", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.PrivateTourRequest", "PrivateTourRequest")
                        .WithMany()
                        .HasForeignKey("PrivateTourRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrivateTourRequest");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.ManagementFeeReference", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.ManagementFeeType", "ManagementFeeType")
                        .WithMany()
                        .HasForeignKey("ManagementFeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ManagementFeeType");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Material", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.MaterialType", "MaterialType")
                        .WithMany()
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialType");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.MaterialAssignment", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.MaterialPriceHistory", "MaterialPriceHistory")
                        .WithMany()
                        .HasForeignKey("MaterialPriceHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialPriceHistory");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.MaterialPriceHistory", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Menu", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", "CreateByAccount")
                        .WithMany()
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.DietaryPreference", "DietaryPreference")
                        .WithMany()
                        .HasForeignKey("DietaryPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.FacilityService", "FacilityService")
                        .WithMany()
                        .HasForeignKey("FacilityServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.MealType", "MealType")
                        .WithMany()
                        .HasForeignKey("MealTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", "UpdateByAccount")
                        .WithMany()
                        .HasForeignKey("UpdateBy");

                    b.Navigation("CreateByAccount");

                    b.Navigation("DietaryPreference");

                    b.Navigation("FacilityService");

                    b.Navigation("MealType");

                    b.Navigation("UpdateByAccount");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.MenuDish", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.OptionEvent", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.OptionQuotation", "OptionQuotation")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("OptionQuotation");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.OptionQuotation", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.AssurancePriceHistory", "AssurancePriceHistory")
                        .WithMany()
                        .HasForeignKey("AssurancePriceHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.OptionClass", "OptionClass")
                        .WithMany()
                        .HasForeignKey("OptionClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.OptionQuotationStatus", "OptionQuotationStatus")
                        .WithMany()
                        .HasForeignKey("OptionQuotationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.PrivateTourRequest", "PrivateTourRequest")
                        .WithMany()
                        .HasForeignKey("PrivateTourRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssurancePriceHistory");

                    b.Navigation("OptionClass");

                    b.Navigation("OptionQuotationStatus");

                    b.Navigation("PrivateTourRequest");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Order", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.PrivateTourRequest", "PrivateTourRequest")
                        .WithMany()
                        .HasForeignKey("PrivateTourRequestId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId");

                    b.Navigation("Customer");

                    b.Navigation("OrderStatus");

                    b.Navigation("PrivateTourRequest");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.PlanServiceCostDetail", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.MaterialPriceHistory", "MaterialPriceHistory")
                        .WithMany()
                        .HasForeignKey("MaterialPriceHistoryId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.ReferenceTransportPrice", "ReferenceTransportPrice")
                        .WithMany()
                        .HasForeignKey("ReferenceTransportPriceId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.SellPriceHistory", "SellPriceHistory")
                        .WithMany()
                        .HasForeignKey("SellPriceHistoryId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialPriceHistory");

                    b.Navigation("ReferenceTransportPrice");

                    b.Navigation("SellPriceHistory");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Port", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Commune", "Commune")
                        .WithMany()
                        .HasForeignKey("CommuneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commune");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.PrivateJoinTourRequest", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", "CreateByAccount")
                        .WithMany()
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.JoinTourStatus", "JoinTourStatus")
                        .WithMany()
                        .HasForeignKey("JoinTourStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Customer", "TravelCompanion")
                        .WithMany()
                        .HasForeignKey("TravelCompanionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", "UpdateByAccount")
                        .WithMany()
                        .HasForeignKey("UpdateBy");

                    b.Navigation("CreateByAccount");

                    b.Navigation("JoinTourStatus");

                    b.Navigation("Tour");

                    b.Navigation("TravelCompanion");

                    b.Navigation("UpdateByAccount");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.PrivateTourRequest", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", "CreateByAccount")
                        .WithMany()
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.DietaryPreference", "DietaryPreference")
                        .WithMany()
                        .HasForeignKey("DietaryPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("MainDestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.FacilityRating", "HotelFacilityRating")
                        .WithMany()
                        .HasForeignKey("MinimumHotelRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.FacilityRating", "RestaurantFacilityRating")
                        .WithMany()
                        .HasForeignKey("MinimumRestaurantRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.PrivateTourStatus", "PrivateTourStatus")
                        .WithMany()
                        .HasForeignKey("PrivateTourStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Commune", "Commune")
                        .WithMany()
                        .HasForeignKey("StartLocationCommuneId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", "UpdateByAccount")
                        .WithMany()
                        .HasForeignKey("UpdateBy");

                    b.Navigation("Commune");

                    b.Navigation("CreateByAccount");

                    b.Navigation("DietaryPreference");

                    b.Navigation("HotelFacilityRating");

                    b.Navigation("PrivateTourStatus");

                    b.Navigation("Province");

                    b.Navigation("RestaurantFacilityRating");

                    b.Navigation("Tour");

                    b.Navigation("UpdateByAccount");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.QuotationDetail", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.FacilityRating", "FacilityRating")
                        .WithMany()
                        .HasForeignKey("FacilityRatingId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.MaterialPriceHistory", "MaterialPriceHistory")
                        .WithMany()
                        .HasForeignKey("MaterialPriceHistoryId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.OptionQuotation", "OptionQuotation")
                        .WithMany()
                        .HasForeignKey("OptionQuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.ServiceType", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId");

                    b.Navigation("District");

                    b.Navigation("FacilityRating");

                    b.Navigation("MaterialPriceHistory");

                    b.Navigation("Menu");

                    b.Navigation("OptionQuotation");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.ReferenceTransportPrice", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Port", "Arrival")
                        .WithMany()
                        .HasForeignKey("ArrivalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Port", "Departure")
                        .WithMany()
                        .HasForeignKey("DepartureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.ReferencePriceRating", "ReferencePriceRating")
                        .WithMany()
                        .HasForeignKey("ReferencePriceRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arrival");

                    b.Navigation("Departure");

                    b.Navigation("ReferencePriceRating");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.RequestedLocation", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.PrivateTourRequest", "PrivateTourRequest")
                        .WithMany()
                        .HasForeignKey("PrivateTourRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrivateTourRequest");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Route", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.DayPlan", "DayPlan")
                        .WithMany()
                        .HasForeignKey("DayPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Facility", "EndPoint")
                        .WithMany()
                        .HasForeignKey("EndPointId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Route", "ParentRoute")
                        .WithMany()
                        .HasForeignKey("ParentRouteId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Port", "PortEndPoint")
                        .WithMany()
                        .HasForeignKey("PortEndPointId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Port", "PortStartPoint")
                        .WithMany()
                        .HasForeignKey("PortStartPointId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Facility", "StartPoint")
                        .WithMany()
                        .HasForeignKey("StartPointId");

                    b.Navigation("DayPlan");

                    b.Navigation("EndPoint");

                    b.Navigation("ParentRoute");

                    b.Navigation("PortEndPoint");

                    b.Navigation("PortStartPoint");

                    b.Navigation("StartPoint");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.SellPriceHistory", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.FacilityService", "FacilityService")
                        .WithMany()
                        .HasForeignKey("FacilityServiceId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.TransportServiceDetail", "TransportServiceDetail")
                        .WithMany()
                        .HasForeignKey("TransportServiceDetailId");

                    b.Navigation("FacilityService");

                    b.Navigation("Menu");

                    b.Navigation("TransportServiceDetail");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.ServiceCostHistory", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.FacilityService", "FacilityService")
                        .WithMany()
                        .HasForeignKey("FacilityServiceId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.TransportServiceDetail", "Transport")
                        .WithMany()
                        .HasForeignKey("TransportServiceDetailId");

                    b.Navigation("FacilityService");

                    b.Navigation("Menu");

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Tour", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Tour", "BasedTour")
                        .WithMany()
                        .HasForeignKey("BasedOnTourId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.TourStatus", "TourStatus")
                        .WithMany()
                        .HasForeignKey("TourStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.TourType", "TourType")
                        .WithMany()
                        .HasForeignKey("TourTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BasedTour");

                    b.Navigation("TourStatus");

                    b.Navigation("TourType");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.TourguideAssignment", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Province");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.TourguideQuotationDetail", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.OptionQuotation", "OptionQuotation")
                        .WithMany()
                        .HasForeignKey("OptionId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.Navigation("OptionQuotation");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.TourGuideSalaryHistory", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.TourguideScope", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("District");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.TourRegistration", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Customer", "Follower")
                        .WithMany()
                        .HasForeignKey("FollowerId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Customer", "Presenter")
                        .WithMany()
                        .HasForeignKey("PresenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Follower");

                    b.Navigation("Presenter");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.TourTraveller", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Transaction", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Customer", "TravelCompanion")
                        .WithMany()
                        .HasForeignKey("TravelCompanionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransactionType");

                    b.Navigation("TravelCompanion");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.TransportServiceDetail", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.FacilityService", "FacilityService")
                        .WithMany()
                        .HasForeignKey("FacilityServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacilityService");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.Vehicle", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.EnumModels.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.VehicleQuotationDetail", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.District", "EndPointDistrict")
                        .WithMany()
                        .HasForeignKey("EndPointDistrictId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Province", "EndPoint")
                        .WithMany()
                        .HasForeignKey("EndPointId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Port", "EndPort")
                        .WithMany()
                        .HasForeignKey("EndPortId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.OptionQuotation", "OptionQuotation")
                        .WithMany()
                        .HasForeignKey("OptionQuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.District", "StartPointDistrict")
                        .WithMany()
                        .HasForeignKey("StartPointDistrictId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Province", "StartPoint")
                        .WithMany()
                        .HasForeignKey("StartPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Port", "StartPort")
                        .WithMany()
                        .HasForeignKey("StartPortId");

                    b.Navigation("EndPoint");

                    b.Navigation("EndPointDistrict");

                    b.Navigation("EndPort");

                    b.Navigation("OptionQuotation");

                    b.Navigation("StartPoint");

                    b.Navigation("StartPointDistrict");

                    b.Navigation("StartPort");
                });

            modelBuilder.Entity("TravelCapstone.BackEnd.Domain.Models.VehicleRoute", b =>
                {
                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelCapstone.BackEnd.Domain.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");

                    b.Navigation("Driver");

                    b.Navigation("Route");

                    b.Navigation("Vehicle");
                });
#pragma warning restore 612, 618
        }
    }
}
